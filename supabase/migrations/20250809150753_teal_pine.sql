/*
  # Create pengumuman table

  1. New Tables
    - `pengumuman`
      - `id` (integer, primary key, auto-increment)
      - `title` (text, required) - Title of the announcement
      - `content` (text, required) - Content/body of the announcement
      - `priority` (text, default 'medium') - Priority level: low, medium, high
      - `active` (boolean, default true) - Whether the announcement is active
      - `created_at` (timestamptz, default now()) - Creation timestamp
      - `updated_at` (timestamptz, default now()) - Last update timestamp

  2. Security
    - Enable RLS on `pengumuman` table
    - Add policy for public read access
    - Add policy for authenticated users to insert/update

  3. Constraints
    - Check constraint for priority values
    - Primary key on id
    - Auto-update trigger for updated_at column
*/

-- Create pengumuman table
CREATE TABLE IF NOT EXISTS pengumuman (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  title text NOT NULL,
  content text NOT NULL,
  priority text DEFAULT 'medium',
  active boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Add check constraint for priority values
ALTER TABLE pengumuman 
ADD CONSTRAINT pengumuman_priority_check 
CHECK (priority IN ('low', 'medium', 'high'));

-- Enable Row Level Security
ALTER TABLE pengumuman ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Anyone can read pengumuman data"
  ON pengumuman
  FOR SELECT
  TO public
  USING (true);

CREATE POLICY "Authenticated users can insert pengumuman data"
  ON pengumuman
  FOR INSERT
  TO authenticated
  WITH CHECK (true);

CREATE POLICY "Authenticated users can update pengumuman data"
  ON pengumuman
  FOR UPDATE
  TO authenticated
  USING (true);

-- Create function to update updated_at column (if it doesn't exist)
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_pengumuman_updated_at
  BEFORE UPDATE ON pengumuman
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();